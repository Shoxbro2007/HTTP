// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é
function toggleMenu() {
  const nav = document.getElementById("navLinks");
  nav.classList.toggle("active");
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏
  const toggleBtn = document.querySelector(".nav-toggle");
  if (nav.classList.contains("active")) {
    toggleBtn.innerHTML = "‚úï";
  } else {
    toggleBtn.innerHTML = "‚ò∞";
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
const toggle = document.getElementById("theme-toggle");
const body = document.body;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã
if (localStorage.getItem("theme") === "dark") {
  body.classList.add("dark-mode");
  toggle.textContent = "üåû";
}

toggle.addEventListener("click", () => {
  body.classList.toggle("dark-mode");
  const isDark = body.classList.contains("dark-mode");
  toggle.textContent = isDark ? "üåû" : "üåô";
  localStorage.setItem("theme", isDark ? "dark" : "light");
});

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–≤–µ—Ä—Ö"
const scrollBtn = document.createElement("div");
scrollBtn.classList.add("scroll-top");
scrollBtn.innerHTML = "‚Üë";
document.body.appendChild(scrollBtn);

window.addEventListener("scroll", () => {
  if (window.scrollY > 500) {
    scrollBtn.classList.add("show");
  } else {
    scrollBtn.classList.remove("show");
  }
});

scrollBtn.addEventListener("click", () => {
  window.scrollTo({
    top: 0,
    behavior: "smooth"
  });
});

// –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
document.addEventListener("DOMContentLoaded", () => {
  const animatedElements = document.querySelectorAll(".fade-in");
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.style.animationPlayState = "running";
      }
    });
  }, { threshold: 0.1 });
  
  animatedElements.forEach(el => observer.observe(el));
});

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫—É—Ä—Å–æ—Ä
const cursor = document.querySelector('.custom-cursor');
const cursorFollower = document.querySelector('.cursor-follower');

document.addEventListener('mousemove', (e) => {
  cursor.style.left = e.clientX + 'px';
  cursor.style.top = e.clientY + 'px';
  
  setTimeout(() => {
    cursorFollower.style.left = e.clientX + 'px';
    cursorFollower.style.top = e.clientY + 'px';
  }, 100);
});

document.querySelectorAll('a, button, .cta-button, .portfolio-item, .social-icon').forEach(el => {
  el.addEventListener('mouseenter', () => {
    cursor.style.transform = 'translate(-50%, -50%) scale(2.5)';
    cursorFollower.style.transform = 'translate(-50%, -50%) scale(2)';
    cursorFollower.style.borderColor = 'transparent';
    cursorFollower.style.background = 'rgba(67, 97, 238, 0.3)';
  });
  
  el.addEventListener('mouseleave', () => {
    cursor.style.transform = 'translate(-50%, -50%) scale(1)';
    cursorFollower.style.transform = 'translate(-50%, -50%) scale(1)';
    cursorFollower.style.borderColor = 'var(--primary)';
    cursorFollower.style.background = 'transparent';
  });
});

// –ü–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–µ—Ä–æ—è
window.addEventListener("scroll", () => {
  const hero = document.querySelector(".hero");
  if (hero) {
    const scrollPosition = window.scrollY;
    hero.style.backgroundPositionY = `${scrollPosition * 0.5}px`;
  }
});

// –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
document.addEventListener('DOMContentLoaded', () => {
  const progressBars = document.querySelectorAll('.progress-bar');
  
  const barObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const width = entry.target.style.width;
        entry.target.style.width = '0';
        setTimeout(() => {
          entry.target.style.width = width;
        }, 300);
      }
    });
  }, { threshold: 0.5 });
  
  progressBars.forEach(bar => barObserver.observe(bar));
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D –∞–≤–∞—Ç–∞—Ä–∞
function init3DAvatar() {
  const container = document.getElementById('avatar-3d');
  if (!container) return;

  // –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É Three.js
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
  const renderer = new THREE.WebGLRenderer({ alpha: true });
  
  renderer.setSize(300, 300);
  container.appendChild(renderer.domElement);

  // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å)
  const geometry = new THREE.SphereGeometry(1, 32, 32);
  const material = new THREE.MeshPhongMaterial({ 
    color: 0xffffff,
    emissive: 0x4361ee,
    shininess: 100
  });
  
  const avatar = new THREE.Mesh(geometry, material);
  scene.add(avatar);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç
  const light = new THREE.PointLight(0xffffff, 1.5);
  light.position.set(2, 2, 3);
  scene.add(light);
  scene.add(new THREE.AmbientLight(0x404040));

  camera.position.z = 3;

  // –ê–Ω–∏–º–∞—Ü–∏—è –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  let isRotating = true;
  
  function animate() {
    requestAnimationFrame(animate);
    
    if (isRotating) {
      avatar.rotation.x += 0.01;
      avatar.rotation.y += 0.01;
    }
    
    renderer.render(scene, camera);
  }
  
  animate();

  // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  container.addEventListener('mouseenter', () => {
    isRotating = false;
    avatar.material.emissive.setHex(0x4cc9f0);
  });
  
  container.addEventListener('mouseleave', () => {
    isRotating = true;
    avatar.material.emissive.setHex(0x4361ee);
  });
  
  container.addEventListener('mousemove', (e) => {
    if (!isRotating) {
      const rect = container.getBoundingClientRect();
      const x = (e.clientX - rect.left) / rect.width * 2 - 1;
      const y = -(e.clientY - rect.top) / rect.height * 2 + 1;
      
      avatar.rotation.y = x;
      avatar.rotation.x = y;
    }
  });
}

// –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü script.js
document.addEventListener('DOMContentLoaded', init3DAvatar);
// –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫
const voiceAssistant = document.getElementById('voice-assistant');

if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {
  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  const recognition = new SpeechRecognition();
  recognition.lang = 'ru-RU';
  recognition.continuous = false;
  recognition.interimResults = true; // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

  // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
  function speak(text) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ru-RU';
    utterance.rate = 1.0;
    speechSynthesis.speak(utterance);
  }

  recognition.onresult = function(event) {
    const result = event.results[0][0].transcript.toLowerCase();
    console.log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ' + result);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    let commandHandled = false;
    
    if (result.includes('–≥–ª–∞–≤–Ω–∞—è') || result.includes('–¥–æ–º–æ–π')) {
      window.location.href = './index.html';
      commandHandled = true;
    } 
    else if (result.includes('–æ–±–æ –º–Ω–µ') || result.includes('–æ —Å–µ–±–µ')) {
      window.location.href = './about.html';
      commandHandled = true;
    } 
    else if (result.includes('–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ') || result.includes('—Ä–∞–±–æ—Ç—ã')) {
      document.getElementById('portfolio').scrollIntoView({ behavior: 'smooth' });
      speak("–ü–æ–∫–∞–∑—ã–≤–∞—é –º–æ–∏ —Ä–∞–±–æ—Ç—ã");
      commandHandled = true;
    } 
    else if (result.includes('–∫–æ–Ω—Ç–∞–∫—Ç—ã') || result.includes('—Å–≤—è–∑–∞—Ç—å—Å—è')) {
      document.getElementById('contact').scrollIntoView({ behavior: 'smooth' });
      speak("–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∏–∂–µ");
      commandHandled = true;
    } 
    else if (result.includes('—Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É') || result.includes('—Ç–µ–º–∞')) {
      document.getElementById('theme-toggle').click();
      speak("–ú–µ–Ω—è—é —Ç–µ–º—É");
      commandHandled = true;
    }
    else if (result.includes('–º–µ–Ω—é') || result.includes('–Ω–∞–≤–∏–≥–∞—Ü–∏—è')) {
      toggleMenu();
      speak("–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é");
      commandHandled = true;
    }
    else if (result.includes('–Ω–∞–≤–µ—Ä—Ö') || result.includes('–≤–≤–µ—Ä—Ö')) {
      window.scrollTo({ top: 0, behavior: 'smooth' });
      speak("–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞—é –≤–≤–µ—Ä—Ö");
      commandHandled = true;
    }
    else if (result.includes('–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç') || result.includes('–ø–æ—Ö–≤–∞–ª–∏')) {
      document.getElementById('compliment-btn').click();
      speak("–ì–æ—Ç–æ–≤–ª—é –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç");
      commandHandled = true;
    }
    
    if (!commandHandled) {
      speak("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å: –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É");
    }
  };

  recognition.onerror = function(event) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ', event.error);
    voiceAssistant.classList.remove('listening');
    speak("–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è");
  };

  recognition.onend = function() {
    voiceAssistant.classList.remove('listening');
  };

  voiceAssistant.addEventListener('click', () => {
    try {
      recognition.start();
      voiceAssistant.classList.add('listening');
      speak("–°–ª—É—à–∞—é –≤–∞—Å...");
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ', error);
      voiceAssistant.classList.remove('listening');
      speak("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏");
    }
  });
} else {
  // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
  voiceAssistant.style.display = 'none';
  console.warn('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SpeechRecognition');
}