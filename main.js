// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–æ–π
const MetaverseConfig = {
    // –¶–≤–µ—Ç–æ–≤—ã–µ —Ç–µ–º—ã
    themes: {
        default: { background: 0x1a1a2e, primaryColor: '#4cc9f0' },
        nature: { background: 0x1b5e20, primaryColor: '#2ecc71' },
        tech: { background: 0x0d47a1, primaryColor: '#3498db' },
        dark: { background: 0x111111, primaryColor: '#9b59b6' },
        light: { background: 0xf5f5f5, primaryColor: '#2980b9' }
    },
    
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤–∞—Ç–∞—Ä–æ–≤
    avatarOptions: [
        'https://cdn-icons-png.flaticon.com/512/4333/4333609.png',
        'https://cdn-icons-png.flaticon.com/512/3667/3667325.png',
        'https://cdn-icons-png.flaticon.com/512/4140/4140048.png'
    ],
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–æ–≤
    modeSettings: {
        learn: { 
            background: 0x1a237e, 
            objects: ['book', 'laptop', 'blackboard'],
            description: '–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è'
        },
        work: { 
            background: 0x263238, 
            objects: ['desk', 'computer', 'chart'],
            description: '–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ'
        },
        fun: { 
            background: 0x4a148c, 
            objects: ['gamepad', 'ball', 'dancefloor'],
            description: '–ó–æ–Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π'
        }
    },
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements: {
        first_learn: { 
            title: '–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π', 
            description: '–í–ø–µ—Ä–≤—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è',
            icon: 'üìö'
        },
        all_modes: { 
            title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', 
            description: '–ü–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤—Å–µ —Ä–µ–∂–∏–º—ã –º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–æ–π',
            icon: 'üåê'
        },
        vr_explorer: { 
            title: 'VR –ü–∏–æ–Ω–µ—Ä', 
            description: '–í–ø–µ—Ä–≤—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ VR —Ä–µ–∂–∏–º',
            icon: 'üëì'
        },
        long_session: { 
            title: '–ó–∞–≤—Å–µ–≥–¥–∞—Ç–∞–π', 
            description: '–ü—Ä–æ–≤–µ–ª–∏ –±–æ–ª–µ–µ 1 —á–∞—Å–∞ –≤ –º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–æ–π',
            icon: '‚è≥'
        }
    }
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const AppState = {
    // THREE.js —ç–ª–µ–º–µ–Ω—Ç—ã
    scene: null,
    camera: null,
    renderer: null,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ VR
    vrEnabled: false,
    
    // –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
    currentMode: null,
    
    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userData: {
        username: '',
        avatar: '',
        theme: 'default',
        interests: [],
        achievements: [],
        stats: {
            timeSpent: 0,    // –í –º–∏–Ω—É—Ç–∞—Ö
            lastLogin: null
        },
        activityHistory: []
    },
    
    // 3D –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Å—Ü–µ–Ω–µ
    objects: [],
    
    // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏
    sessionStartTime: null,
    
    // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    socket: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    initApp();
});

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initApp() {
    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserData();
    
    // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingScreen(() => {
        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º 3D —Å—Ü–µ–Ω—É
        init3DScene();
        
        // 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        // 5. –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (!AppState.userData.username) {
            showUsernameModal();
        } else {
            showWelcomeBackNotification();
        }
        
        // 6. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å–µ—Å—Å–∏–∏
        startSessionTimer();
    });
}

// ======================
// –§–£–ù–ö–¶–ò–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
// ======================

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingScreen(callback) {
    const loadingScreen = document.getElementById('loading-screen');
    loadingScreen.style.opacity = '1';
    loadingScreen.style.display = 'flex';
    
    setTimeout(() => {
        loadingScreen.style.opacity = '0';
        setTimeout(() => {
            loadingScreen.style.display = 'none';
            callback();
        }, 1000);
    }, 2000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D —Å—Ü–µ–Ω—ã
function init3DScene() {
    // 1. –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É
    AppState.scene = new THREE.Scene();
    updateSceneTheme();
    
    // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
    AppState.camera = new THREE.PerspectiveCamera(
        75, 
        window.innerWidth / window.innerHeight, 
        0.1, 
        1000
    );
    AppState.camera.position.z = 5;
    
    // 3. –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
    AppState.renderer = new THREE.WebGLRenderer({ 
        antialias: true,
        alpha: true
    });
    AppState.renderer.setSize(window.innerWidth, window.innerHeight);
    AppState.renderer.setPixelRatio(window.devicePixelRatio);
    document.getElementById('metaverse-container').appendChild(AppState.renderer.domElement);
    
    // 4. –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
    addBasicLights();
    
    // 5. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    addDefaultObjects();
    
    // 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', handleWindowResize);
    
    // 7. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animate();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è
function addBasicLights() {
    // 1. –§–æ–Ω–æ–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
    const ambientLight = new THREE.AmbientLight(0x404040, 0.5);
    AppState.scene.add(ambientLight);
    
    // 2. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–≤–µ—Ç
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(1, 1, 1);
    AppState.scene.add(directionalLight);
    
    // 3. –¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç
    const pointLight = new THREE.PointLight(0x4cc9f0, 1, 10);
    pointLight.position.set(0, 2, 2);
    AppState.scene.add(pointLight);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
function addDefaultObjects() {
    // 1. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—É–±
    const cubeGeometry = new THREE.BoxGeometry(1, 1, 1);
    const cubeMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x4cc9f0,
        shininess: 100
    });
    const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
    cube.userData = { 
        interactive: true, 
        type: 'welcome',
        name: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—É–±'
    };
    AppState.scene.add(cube);
    AppState.objects.push(cube);
    
    // 2. –°—Ñ–µ—Ä–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);
    const sphereMaterial = new THREE.MeshPhongMaterial({ 
        color: 0xf72585,
        emissive: 0xff0066,
        emissiveIntensity: 0.2
    });
    const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
    sphere.position.set(-2, 0, 0);
    sphere.userData = { 
        interactive: true, 
        type: 'learn',
        name: '–°—Ñ–µ—Ä–∞ –∑–Ω–∞–Ω–∏–π'
    };
    AppState.scene.add(sphere);
    AppState.objects.push(sphere);
    
    // 3. –¢–æ—Ä –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
    const torusGeometry = new THREE.TorusGeometry(0.5, 0.2, 16, 100);
    const torusMaterial = new THREE.MeshPhongMaterial({ 
        color: 0x7209b7,
        specular: 0xffffff
    });
    const torus = new THREE.Mesh(torusGeometry, torusMaterial);
    torus.position.set(2, 0, 0);
    torus.userData = { 
        interactive: true, 
        type: 'fun',
        name: '–ö–æ–ª—å—Ü–æ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π'
    };
    AppState.scene.add(torus);
    AppState.objects.push(torus);
}

// ======================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ======================

// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∏–º–∞—Ü–∏–∏
function animate() {
    requestAnimationFrame(animate);
    
    // –í—Ä–∞—â–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    AppState.objects.forEach(obj => {
        if (obj.userData.interactive) {
            obj.rotation.x += 0.005;
            obj.rotation.y += 0.01;
        }
    });
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ü–µ–Ω—ã
    AppState.renderer.render(AppState.scene, AppState.camera);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VR —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
    if (AppState.vrEnabled && AppState.renderer.xr.isPresenting) {
        AppState.renderer.xr.update();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
function handleWindowResize() {
    AppState.camera.aspect = window.innerWidth / window.innerHeight;
    AppState.camera.updateProjectionMatrix();
    AppState.renderer.setSize(window.innerWidth, window.innerHeight);
}

// ======================
// –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú
// ======================

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    const savedData = localStorage.getItem('metaverseUserData');
    
    if (savedData) {
        try {
            AppState.userData = JSON.parse(savedData);
            AppState.userData.stats.lastLogin = new Date().toISOString();
            updateUI();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            resetUserData();
        }
    } else {
        resetUserData();
    }
}

// –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function resetUserData() {
    AppState.userData = {
        username: '',
        avatar: '',
        theme: 'default',
        interests: [],
        achievements: [],
        stats: {
            timeSpent: 0,
            lastLogin: new Date().toISOString()
        },
        activityHistory: []
    };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserData() {
    localStorage.setItem('metaverseUserData', JSON.stringify(AppState.userData));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    // 1. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userInfoElement = document.getElementById('user-info');
    if (AppState.userData.username) {
        userInfoElement.textContent = AppState.userData.username;
    } else {
        userInfoElement.textContent = '–ì–æ—Å—Ç—å';
    }
    
    // 2. –ê–≤–∞—Ç–∞—Ä
    updateAvatarUI();
    
    // 3. –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    document.getElementById('achievements-count').textContent = 
        AppState.userData.achievements.length;
    
    // 4. –í—Ä–µ–º—è –≤ –º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–æ–π
    updateTimeSpentUI();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –≤ UI
function updateAvatarUI() {
    const avatarElement = document.getElementById('avatar');
    
    if (AppState.userData.avatar) {
        avatarElement.innerHTML = `<img src="${AppState.userData.avatar}" alt="–ê–≤–∞—Ç–∞—Ä">`;
    } else if (AppState.userData.username) {
        avatarElement.textContent = AppState.userData.username.charAt(0).toUpperCase();
        avatarElement.style.backgroundColor = stringToColor(AppState.userData.username);
    } else {
        avatarElement.textContent = '?';
        avatarElement.style.backgroundColor = '#4cc9f0';
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
function stringToColor(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    
    const color = `hsl(${hash % 360}, 70%, 60%)`;
    return color;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ UI
function updateTimeSpentUI() {
    const hours = Math.floor(AppState.userData.stats.timeSpent / 60);
    const minutes = AppState.userData.stats.timeSpent % 60;
    document.getElementById('time-spent').textContent = 
        `${hours > 0 ? `${hours}h ` : ''}${minutes}m`;
}

// ======================
// –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê
// ======================

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function showUsernameModal() {
    const username = prompt('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω—É—é!\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?', '–ì–æ—Å—Ç—å');
    
    if (username !== null) {
        AppState.userData.username = username || '–ì–æ—Å—Ç—å';
        saveUserData();
        updateUI();
        showAvatarModal();
    }
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞
function showAvatarModal() {
    const modal = document.getElementById('avatar-modal');
    modal.style.display = 'flex';
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
    document.querySelectorAll('.avatar-option').forEach(option => {
        option.addEventListener('click', function() {
            const avatarIndex = parseInt(this.getAttribute('data-avatar')) - 1;
            setAvatar(MetaverseConfig.avatarOptions[avatarIndex]);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
    document.getElementById('set-custom-avatar').addEventListener('click', () => {
        const url = document.getElementById('custom-avatar-url').value.trim();
        if (url) {
            setAvatar(url);
        } else {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –∞–≤–∞—Ç–∞—Ä–∞');
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('close-avatar-modal').addEventListener('click', () => {
        modal.style.display = 'none';
        showWelcomeBackNotification();
    });
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
function setAvatar(url) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
    if (!url.match(/^https?:\/\/.+\..+/)) {
        showNotification('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∞–≤–∞—Ç–∞—Ä–∞');
        return;
    }
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const img = new Image();
    img.onload = () => {
        AppState.userData.avatar = url;
        saveUserData();
        updateAvatarUI();
        showNotification('–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    };
    img.onerror = () => {
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    };
    img.src = url;
}

// ======================
// –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
// ======================

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    
    const container = document.getElementById('notification-container');
    container.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 5000);
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showWelcomeBackNotification() {
    if (AppState.userData.username) {
        showNotification(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${AppState.userData.username}!`);
    }
}

// ======================
// –†–ï–ñ–ò–ú–´ –ò –¢–ï–ú–´
// ======================

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞
function setMode(mode) {
    if (!MetaverseConfig.modeSettings[mode] || AppState.currentMode === mode) return;
    
    AppState.currentMode = mode;
    
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ü–µ–Ω—É
    updateSceneForMode(mode);
    
    // 2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    recordActivity(mode);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    checkAchievements();
    
    // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    showNotification(MetaverseConfig.modeSettings[mode].description);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è —Ä–µ–∂–∏–º–∞
function updateSceneForMode(mode) {
    const modeConfig = MetaverseConfig.modeSettings[mode];
    
    if (modeConfig) {
        // 1. –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ–Ω
        AppState.scene.background = new THREE.Color(modeConfig.background);
        
        // 2. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
        updateLightingForMode(mode);
        
        // 3. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω—ã
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞
function updateLightingForMode(mode) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    const ambientLight = AppState.scene.children.find(child => 
        child instanceof THREE.AmbientLight
    );
    
    if (ambientLight) {
        switch (mode) {
            case 'learn':
                ambientLight.intensity = 0.6;
                break;
            case 'work':
                ambientLight.intensity = 0.8;
                break;
            case 'fun':
                ambientLight.intensity = 0.4;
                break;
            default:
                ambientLight.intensity = 0.5;
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã —Å—Ü–µ–Ω—ã
function updateSceneTheme() {
    const theme = MetaverseConfig.themes[AppState.userData.theme || 'default'];
    AppState.scene.background = new THREE.Color(theme.background);
}

// ======================
// VR –§–£–ù–ö–¶–ò–ò
// ======================

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ VR —Ä–µ–∂–∏–º–∞
function toggleVR() {
    if (!AppState.vrEnabled) {
        enableVR();
    } else {
        disableVR();
    }
}

// –í–∫–ª—é—á–µ–Ω–∏–µ VR
function enableVR() {
    if (!('xr' in navigator)) {
        showNotification('WebXR –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
        return;
    }
    
    navigator.xr.isSessionSupported('immersive-vr').then(supported => {
        if (supported) {
            const sessionInit = { optionalFeatures: ['local-floor'] };
            
            navigator.xr.requestSession('immersive-vr', sessionInit)
                .then(session => {
                    setupVRSession(session);
                })
                .catch(err => {
                    console.error('–û—à–∏–±–∫–∞ VR —Å–µ—Å—Å–∏–∏:', err);
                    showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å VR');
                });
        } else {
            showNotification('VR –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º');
        }
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VR —Å–µ—Å—Å–∏–∏
function setupVRSession(session) {
    AppState.vrEnabled = true;
    document.getElementById('vr-btn').textContent = '–í—ã–π—Ç–∏ –∏–∑ VR';
    
    // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ –¥–ª—è VR
    AppState.renderer.xr.setSession(session);
    AppState.renderer.xr.enabled = true;
    
    // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
    session.addEventListener('end', disableVR);
    
    // 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
    setupVRControllers();
    
    // 4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    showNotification('VR —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
    unlockAchievement('vr_explorer');
}

// –í—ã–∫–ª—é—á–µ–Ω–∏–µ VR
function disableVR() {
    if (AppState.renderer.xr.getSession()) {
        AppState.renderer.xr.getSession().end();
    }
    
    AppState.vrEnabled = false;
    document.getElementById('vr-btn').textContent = 'VR';
    AppState.renderer.xr.enabled = false;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VR –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
function setupVRControllers() {
    const controllerModelFactory = new THREE.XRControllerModelFactory();
    
    for (let i = 0; i < 2; i++) {
        const controller = AppState.renderer.xr.getController(i);
        controller.addEventListener('selectstart', onVRSelectStart);
        controller.addEventListener('selectend', onVRSelectEnd);
        AppState.scene.add(controller);
        
        const controllerGrip = AppState.renderer.xr.getControllerGrip(i);
        controllerGrip.add(controllerModelFactory.createControllerModel(controllerGrip));
        AppState.scene.add(controllerGrip);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –≤ VR
function onVRSelectStart(event) {
    const controller = event.target;
    const intersections = getControllerIntersections(controller);
    
    if (intersections.length > 0) {
        const object = intersections[0].object;
        if (object.userData.interactive) {
            handleObjectInteraction(object);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –≤ VR
function onVRSelectEnd(event) {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
function getControllerIntersections(controller) {
    const tempMatrix = new THREE.Matrix4();
    tempMatrix.identity().extractRotation(controller.matrixWorld);
    
    const raycaster = new THREE.Raycaster();
    raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);
    raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);
    
    return raycaster.intersectObjects(AppState.objects);
}

// ======================
// –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° –û–ë–™–ï–ö–¢–ê–ú–ò
// ======================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
function onObjectClick(event) {
    if (AppState.vrEnabled) return;
    
    const mouse = new THREE.Vector2(
        (event.clientX / window.innerWidth) * 2 - 1,
        -(event.clientY / window.innerHeight) * 2 + 1
    );
    
    const raycaster = new THREE.Raycaster();
    raycaster.setFromCamera(mouse, AppState.camera);
    
    const intersections = raycaster.intersectObjects(AppState.objects);
    
    if (intersections.length > 0) {
        const object = intersections[0].object;
        if (object.userData.interactive) {
            handleObjectInteraction(object);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–±—ä–µ–∫—Ç–æ–º
function handleObjectInteraction(obj) {
    if (!obj.userData.type) return;
    
    switch (obj.userData.type) {
        case 'learn':
            setMode('learn');
            showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–æ–Ω—É –æ–±—É—á–µ–Ω–∏—è!');
            break;
        case 'fun':
            setMode('fun');
            showNotification('–í—Ä–µ–º—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π!');
            break;
        case 'work':
            setMode('work');
            showNotification('–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            break;
        case 'welcome':
            showNotification(`–ü—Ä–∏–≤–µ—Ç, ${AppState.userData.username || '–¥—Ä—É–≥'}!`);
            break;
        default:
            showNotification(`–í—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç–µ —Å ${obj.userData.name || '–æ–±—ä–µ–∫—Ç–æ–º'}`);
    }
}

// ======================
// –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
// ======================

// –ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function recordActivity(mode) {
    AppState.userData.activityHistory.push({
        mode,
        timestamp: new Date().toISOString()
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    if (AppState.userData.activityHistory.length > 100) {
        AppState.userData.activityHistory.shift();
    }
    
    saveUserData();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
    if (!AppState.userData.achievements.includes('first_learn') && 
        AppState.userData.activityHistory.some(a => a.mode === 'learn')) {
        unlockAchievement('first_learn');
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
    const modes = Object.keys(MetaverseConfig.modeSettings);
    const allModesUsed = modes.every(mode => 
        AppState.userData.activityHistory.some(a => a.mode === mode)
    );
    
    if (allModesUsed && !AppState.userData.achievements.includes('all_modes')) {
        unlockAchievement('all_modes');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ—Å—Å–∏–∏
    if (AppState.userData.stats.timeSpent >= 60 && 
        !AppState.userData.achievements.includes('long_session')) {
        unlockAchievement('long_session');
    }
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function unlockAchievement(id) {
    if (!MetaverseConfig.achievements[id] || 
        AppState.userData.achievements.includes(id)) {
        return;
    }
    
    AppState.userData.achievements.push(id);
    document.getElementById('achievements-count').textContent = 
        AppState.userData.achievements.length;
    
    const achievement = MetaverseConfig.achievements[id];
    showNotification(
        `${achievement.icon || 'üèÜ'} –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.title}\n${achievement.description}`
    );
    
    saveUserData();
}

// ======================
// –¢–ê–ô–ú–ï–† –°–ï–°–°–ò–ò
// ======================

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å–µ—Å—Å–∏–∏
function startSessionTimer() {
    AppState.sessionStartTime = new Date();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    AppState.sessionTimer = setInterval(() => {
        AppState.userData.stats.timeSpent += 1;
        updateTimeSpentUI();
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        if (AppState.userData.stats.timeSpent % 10 === 0) {
            saveUserData();
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        checkAchievements();
    }, 60000);
}

// ======================
// –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
// ======================

function setupEventListeners() {
    // 1. –ö–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
    document.getElementById('vr-btn').addEventListener('click', toggleVR);
    document.getElementById('ar-btn').addEventListener('click', () => {
        showNotification('AR —Ä–µ–∂–∏–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });
    document.getElementById('3d-btn').addEventListener('click', () => {
        setMode(null); // –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞
        showNotification('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π 3D —Ä–µ–∂–∏–º');
    });
    
    // 2. –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    document.querySelectorAll('.action-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const mode = this.getAttribute('data-mode');
            setMode(mode);
        });
    });
    
    // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ 3D –æ–±—ä–µ–∫—Ç–∞–º
    window.addEventListener('click', onObjectClick, false);
    
    // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
    window.addEventListener('beforeunload', () => {
        clearInterval(AppState.sessionTimer);
        saveUserData();
    });
}

// ======================
// –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ======================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ DOMContentLoaded